//Create by David Lee 
//student number: 200351644

//made using visual studios and Cosmos and ran with VMware
//testing is impossible without a virtual machine like VMware
//for VMware to find the OS it must be in its natural position for Visual Studios


//this OS is designed to do simple tasks that all OS can do
// 1. Check time                                 (complete)
// 2. Write,save,open, and delete text docs      (complete)
// 3. Calculate simple mathematics  ie 10/5      (complete)
// 4. explore operating system                   (complete)
// 5. shutdown OS                                (complete)

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;                            //added to allow for a file system
using Sys = Cosmos.System;

namespace OS2
{
    public class Kernel : Sys.Kernel
    {

        Sys.FileSystem.CosmosVFS fs;
        string current_directory = @"0:\";

        protected override void BeforeRun()
        {
            fs = new Sys.FileSystem.CosmosVFS();                                                      //file system setup
            Sys.FileSystem.VFS.VFSManager.RegisterVFS(fs);                                            //^^^^^^^^^^^^^^^^^
            Console.WriteLine("Boot Sucessful, Welcome to Booker OS. \n For help please type help.");
        }

        protected override void Run()
        {
            Console.Write(current_directory + "> ");                                                  //shows new console line
            var input = Console.ReadLine().ToLower();

            if (input == "help")                                                                       //lists all possible options
            {
                //list of options
                Console.WriteLine("Commmand list:");
                Console.WriteLine("about    - information about OS");
                Console.WriteLine("help     - lists all possible commands");
                Console.WriteLine("time     - shows current time");
                Console.WriteLine("echo     - restates the line written after it");
                Console.WriteLine("cal      - calculates simple mathematics");
                Console.WriteLine("clear    - clears the screen");
                Console.WriteLine("colour   - changed text color to what is specified after words (limited)");
                Console.WriteLine("dir      - lists all files and directories");
                Console.WriteLine("cd       - goes to a directory [.. to parent / rt to root directory ]");
                Console.WriteLine("rmdir    - Delete an empty directory");
                Console.WriteLine("mkdir    - create directory");
                Console.WriteLine("wr       - writes overwrite/creates a file (wr name.txt)");
                Console.WriteLine("rd       - read a file name.txt");
                Console.WriteLine("dl       - delete file");                        
                Console.WriteLine("shutdown - will power down computer");
            }


            //----------------------------------simple commands-------------------------------------------------------------------||

            else if (input == "time")
            {
                string v = string.Format("{0:HH:mm:ss tt}", DateTime.Now);    //gives format of how time will be shown
                string time = v;                                              //an Exception is made if this is not here
                Console.WriteLine("The current time is {0}", time);
            }

            else if (input == "cal")
            {
                calCommand();
            }

            else if (input == "about")
            {
                Console.WriteLine("Booker OS Version 0.5");
                Console.WriteLine("Created in C# with the use of Visual studios 2019 and Cosmos");
            }

            else if (input == "shutdown")
            {
                //shutdown command
                Cosmos.System.Power.Shutdown();
            }

            else if (input == "clear")
            {
                //add line to push anything off the screen
                Console.Clear();
            }

            else if (input.StartsWith("echo "))
            {
                //this removes the echo and space and restates the statement
                Console.WriteLine(input.Remove(0, 5));
            }

            else if (input.StartsWith("colour "))
            {
                var color = input.Remove(0, 7);  //removes colour and space
                if (Check_color(color) == true)
                {
                    Console.WriteLine("colour successfully changed");
                }
                else
                {
                    Console.WriteLine("failed to change color. \n possible colours: Black, DarkBlue, DarkGreen, DarkCyan, DarkRed, \n DarkMagenta, DarkYellow, Gray, DarkGrey, Blue, \n Green, Cyan, Red, Magenta, Yellow.");
                }
            }

            //----------------------------------Directory related commands--------------------------------------------------||

            else if (input == "dir")            //to be implemented once file are implemented
            {
                string[] dirs = GetDir(current_directory);
                foreach (var item in dirs)
                {
                    Console.WriteLine(item);
                }
                string[] fi = GetFil(current_directory);
                foreach (var item in fi)
                {
                    Console.WriteLine(item);
                }
            }

            else if(input.StartsWith("mkdir "))
            {
                input = input.Remove(0, 6);
                if (current_directory == @"0:\")
                {
                    input = current_directory + input;
                }
                else
                {
                    input = current_directory + @"\" + input;
                }
                CreateDir(input);
            }

            else if (input.StartsWith("rmdir "))
            {
                input = input.Remove(0, 6);
                if (current_directory == @"0:\")
                {
                    input = current_directory + input;
                }
                else
                {
                    input = current_directory + @"\" + input;
                }
                DeleteDir(input);
            }

            else if(input.StartsWith("cd "))
            {
                input = input.Remove(0, 3);                                           //setup code to prepare input for movement
                if (current_directory == @"0:\")
                {
                    input = current_directory + input;
                }
                else if(input == ".." && current_directory != @"0:\")
                {
                    DirectoryInfo info = Directory.GetParent(current_directory);
                    input = info.ToString();
                }
                else if(input == "" || input == null || input == "rt")                //catch all on the off chance a space is used with no input
                {
                     input  = Directory.GetDirectoryRoot(current_directory);
                }
                else
                {
                    input = current_directory + @"\" + input;
                }
                MvDir(input);                                                        //moves to simple function to move to the new directory
            }



            //---------------------------------------txt file commands------------------------------------------------------------------------

            else if(input.StartsWith("wr ") && input.EndsWith(".txt"))
            {
                input = input.Remove(0, 3);
                Wrfile(input);
            }

            else if (input.StartsWith("rd ") && input.EndsWith(".txt"))
            {
                input = input.Remove(0, 3);
                Rdfile(input);
            }

            else if(input.StartsWith("dl ")))
            {
                input = input.Remove(0, 3);
                Dlfile(input);
            }
            //--------------------------------------------------------------------------------------------------------------------------------

            else                              //catch all if no valid command is given
            {
                Console.WriteLine("invalid command");
            }
        }










        //************************************************************************************************************************************








        //Protection levels in C# prevent me from trnasfering these to a new file
        //Functionality comes first
        //-------------------------------------------Cal command-------------------------------------------------------------------
        private void calCommand() //simple calculator
        {
            int result;
            Console.WriteLine("please enter an integer");      //done in this manner as parse and split would crash the system
            var in1 = Console.ReadLine().ToLower();          // if not all values where filled as such this is a simple solution
            if (in1 == null || in1 == "")
            {
                Console.WriteLine("ERROR: no values entered");
                return;
            }

            Console.WriteLine("please enter a valid operator");  //grabs operator
            var op = Console.ReadLine().ToLower();
            if (op == null || op == "")
            {
                Console.WriteLine("ERROR: no values entered");
                return;
            }

            Console.WriteLine("please enter an integer");       //second int
            var in2 = Console.ReadLine().ToLower();
            if (in2 == null || in2 == "")
            {
                Console.WriteLine("ERROR: no values entered");
                return;
            }

            int val1;
            int val2;


            if (int.TryParse(in1, out val1))                   //tries to parse in1 into an integer if it fails than gives an error
            {
                if (!int.TryParse(in2, out val2))
                {
                    Console.WriteLine("ERROR: nonvalid integer");
                    return;
                }

                if (op == "+")                //can only do simple calculations
                {
                    result = val1 + val2;
                    Console.WriteLine("Result = " + result); //result writeline here as otherwise an error occurs
                }
                else if (op == "-")
                {
                    result = val1 - val2;
                    Console.WriteLine("Result = " + result);
                }
                else if (op == "*")
                {
                    result = val1 * val2;
                    Console.WriteLine("Result = " + result);
                }
                else if (op == "/")
                {
                    result = val1 / val2;
                    Console.WriteLine("Result = " + result);
                }
                else
                {
                    Console.WriteLine("invalid operator");   //final catcher if somthing goes awry
                }
                return;
            }
            Console.WriteLine("ERROR: nonvalid integer");
            return;
        }

        //--------------------------------------------Dir Command---------------------------------------------------
        private string[] GetDir(string adr)  //dir command function
        {
            var dir = Directory.GetDirectories(adr);
            return dir;
        }
        private string[] GetFil(string adr)
        {
            var fil = Directory.GetFiles(adr);
            return fil;
        }


        //------------------------------------------mkdir command------------------------------------------------

        private void CreateDir(string adr)
        {
            try
            {
                //check if file exits
                if (Directory.Exists(adr))
                {
                    Console.WriteLine("Directory already exits");
                    return;
                }

                DirectoryInfo path = Directory.CreateDirectory(adr);
                Console.WriteLine("Directory {0} successfully created", path);
            }
            //error message
            catch (Exception e)
            {
                Console.WriteLine("Failed to create Directory: {0}", e.ToString());
            }
            finally { };
        }
        //---------------------------------rmdir command-----------------------------------------------------------
        private void DeleteDir(string adr)
        {
            try
            {
                if(!Directory.Exists(adr))
                {
                    Console.WriteLine("Directory does not exist");
                    return;
                }
                Directory.Delete(adr, true); //delete an empty directory
            }
            catch(Exception e)
            {
                Console.WriteLine("Failed to delete: {0}", e.ToString());
            }
            finally { };
        }

        //---------------------------------cd command--------------------------------------------------------------
        private void MvDir(string adr)
        {
            try
            {
                if(!Directory.Exists(adr))
                {
                    Console.WriteLine("Directory does not exist");
                    return;
                }
                Directory.SetCurrentDirectory(adr);
                current_directory = adr;
            }
            catch (DirectoryNotFoundException e)
            {
                Console.WriteLine("directory does not exist. {0}", e);
            }
            finally { }
        }

        //-----------------------------------wr command------------------------------------------------------------
        private void Wrfile(string adr)
        {
            if (current_directory == @"0:\")
            {
                adr = current_directory + adr;
            }
            else
            {
                adr = current_directory + @"\" + adr;
            }

            Console.WriteLine(adr);

            try
            {
                string line = "0";

                if(File.Exists(adr))
                {
                    File.Delete(adr);
                }

                using (StreamWriter source = File.CreateText(adr))
                {
                    while (line != "" || line == null)                  //goes as long as line is not blank
                    {
                        source.WriteLine(line = Console.ReadLine());
                    }
                }

            }
            catch (Exception e)
            {
                Console.WriteLine("Exception: " + e.Message);
            }
            finally { }
        }

        //--------------------------------------------Rd command-----------------------------------------------------------------
        private void Rdfile(string adr)
        {
            if (current_directory == @"0:\")
            {
                adr = current_directory + adr;
            }
            else
            {
                adr = current_directory + @"\" + adr;
            }

            try
            {
                if (File.Exists(adr))
                {

                    StreamReader source = new StreamReader(adr);

                    string line = source.ReadLine();

                    while (line != null)
                    {
                        Console.WriteLine(line);
                        line = source.ReadLine();
                    }
                }
                else
                {
                    Console.WriteLine("file does not exist");
                }
            }
            catch (Exception e)
            {
                Console.WriteLine("Exception: " + e.Message);
            }
            finally { }
        }
       //------------------------------------------dl command------------------------------------------------------
        private void Dlfile(string adr)
        {
            if (current_directory == @"0:\")
            {
                adr = current_directory + adr;
            }
            else
            {
                adr = current_directory + @"\" + adr;
            }

            try
            {
                if (!File.Exists(adr))
                {
                    Console.WriteLine("File does not exist");
                    return;
                }
                File.Delete(adr);
                Console.WriteLine("Deletion successfull");

            }
            catch (IOException e)
            {
                Console.WriteLine(e.Message);
            }
            finally { }
        }

        //-----------------------------------------Colour command--------------------------------------------------
        private bool Check_color(string color)           //colour command function
        {
            switch (color)                  //Switch statement to find the colour chosen. returns false if there is an error
            {
                case "black":
                    {
                        Console.ForegroundColor = ConsoleColor.Black;
                        return true;
                    }
                case "darkblue":
                    {
                        Console.ForegroundColor = ConsoleColor.DarkBlue;
                        return true;
                    }
                case "darkgreen":
                    {
                        Console.ForegroundColor = ConsoleColor.DarkGreen;
                        return true;
                    }
                case "darkcyan":
                    {
                        Console.ForegroundColor = ConsoleColor.DarkCyan;
                        return true;
                    }
                case "darkred":
                    {
                        Console.ForegroundColor = ConsoleColor.DarkRed;
                        return true;
                    }
                case "darkmagenta":
                    {
                        Console.ForegroundColor = ConsoleColor.DarkMagenta;
                        return true;
                    }
                case "darkyellow":
                    {
                        Console.ForegroundColor = ConsoleColor.DarkYellow;
                        return true;
                    }
                case "gray":
                    {
                        Console.ForegroundColor = ConsoleColor.Gray;
                        return true;
                    }
                case "darkgray":
                    {
                        Console.ForegroundColor = ConsoleColor.DarkGray; 
                        return true;
                    }
                case "blue":
                    {
                        Console.ForegroundColor = ConsoleColor.Blue;
                        return true;
                    }
                case "green":
                    {
                        Console.ForegroundColor = ConsoleColor.Green;
                        return true;
                    }
                case "cyan":
                    {
                        Console.ForegroundColor = ConsoleColor.Cyan;
                        return true;
                    }
                case "red":
                    {
                        Console.ForegroundColor = ConsoleColor.Red;
                        return true;
                    }
                case "magenta":
                    {
                        Console.ForegroundColor = ConsoleColor.Magenta;
                        return true;
                    }
                case "yellow":
                    {
                        Console.ForegroundColor = ConsoleColor.Yellow;
                        return true;
                    }
                case "white":
                    {
                        Console.ForegroundColor = ConsoleColor.White;
                        return true;
                    }
                default:
                    {
                        return false;
                    }
            }
        }
        //-------------------------------------------------------------------------------------

    }
}
