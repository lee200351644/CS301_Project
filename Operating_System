//Create by David Lee 
//student number: 200351644

//made using visual studios and Cosmos and ran with VMware
//testing is impossible without a virtual machine like VMware
//for VMware to find the OS it must be in its natural position for Visual Studios


//this OS is designed to do simple tasks that all OS can do
// 1. Check time                                 (inprogress)
// 2. Write,save,open, and delete text docs      (inprogress)
// 3. Calculate simple mathematics  ie 10/5      (fixing bugs)
// 4. Change desktop background                  (inprogress)
// 5. explore operating system                   (inprogress)
// 6. shutdown OS                                (complete)

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;                 //added to allow for a file system
using Sys = Cosmos.System;

namespace OS2
{
    public class Kernel : Sys.Kernel
    {

        Sys.FileSystem.CosmosVFS fs;
        string current_directory = "0:\\"; //double \ to allow it to be written in a string

        protected override void BeforeRun()
        {
            fs = new Sys.FileSystem.CosmosVFS();                                                      //file system setup
            Sys.FileSystem.VFS.VFSManager.RegisterVFS(fs);                                            //^^^^^^^^^^^^^^^^^
            Console.WriteLine("Boot Sucessful, Welcome to Booker OS. \n For help please type help.");
        }

        protected override void Run()
        {
            Console.Write(current_directory + "> ");                                                  //shows new console line
            var input = Console.ReadLine().ToLower();

            if(input == "help")                                                                       //lists all possible options
            {
                //list of options
                Console.WriteLine("Commmand list:");
                Console.WriteLine("about    - information about OS");
                Console.WriteLine("cal      - calculates simple mathematics");
                Console.WriteLine("cd       - goes to a directory  [cd will return to root while cd .. will go up one to parent directory]");
                Console.WriteLine("clear    - clears the screen");
                Console.WriteLine("colour    - changed text color to what is specified after words (limited)");
                Console.WriteLine("dir      - lists all files and directories");
                Console.WriteLine("echo     - restates the line written after it");
                Console.WriteLine("help     - lists all possible commands");
                Console.WriteLine("print    - prints file contents");
                Console.WriteLine("shutdown - will power down computer");
                Console.WriteLine("write    - writes to a file");
            }

            else if(input == "cal")
            {
                calCommand();
            }

            else if(input == "about")
            {
                Console.WriteLine("Booker OS Version 0.4");
                Console.WriteLine("Created in C# with the use of Visual studios 2019 and Cosmos");
            }

            else if(input == "shutdown")
            {
                //shutdown command
                Cosmos.System.Power.Shutdown();
            }

            else if(input == "clear")
            {
                //add line to push anything off the screen
                Console.Clear();
            }

            else if(input.StartsWith("echo "))
            {
                //this removes the echo and space and restates the statement
                Console.WriteLine(input.Remove(0, 5));
            }

            else if(input.StartsWith("colour "))
            {
                var color = input.Remove(0, 7);  //removes colour 
                if (check_color(color) == true)
                {
                    Console.WriteLine("colour successfully changed");
                }
                else
                {
                    Console.WriteLine("failed to change color. \n possible colours: Black, DarkBlue, DarkGreen, DarkCyan, DarkRed, \n DarkMagenta, DarkYellow, Gray, DarkGrey, Blue, \n Green, Cyan, Red, Magenta, Yellow.");
                }
            }
            else if(input == "dir")            //to be implemented once file are implemented
            {
                string[] dirs = GetDir(current_directory);
                foreach (var item in dirs)
                {
                    Console.WriteLine(item);
                }
            }

            //else if (input == "cd")            //to be implemented once file are implemented
            //{
            //    
            //}

            //else if (input == "print")            //to be implemented once file are implemented
            //{
            //}
            //else if (input == "write")            //to be implemented once file are implemented
            //{
            //}

            else
            {
                Console.WriteLine("invalid command");
            }
        }

        private void calCommand() //simple calculator
        {
            Console.WriteLine("please enter an expression in the form:5 + 9");      //error that crashed system occurs when not in the right syntax
            var input = Console.ReadLine().ToLower();                               //possible fix
            string[] lex = input.Split(' ');
            int result;
            int val1 = int.Parse(lex[0]);
            int val2 = int.Parse(lex[2]);

            if (lex[1] == "+")                //can only do simple calculations
            {
                result = val1 + val2;
                Console.WriteLine("Result = " + result); //result writeline here as otherwise an error occurs
            }
            else if(lex[1] == "-")
            {
                result = val1 - val2;
                Console.WriteLine("Result = " + result);
            }
            else if (lex[1] == "*")
            {
                result = val1 * val2;
                Console.WriteLine("Result = " + result);
            }
            else if (lex[1] == "/")
            {
                result = val1 / val2;
                Console.WriteLine("Result = " + result);
            }
            else
            {
                Console.WriteLine("invalid command a space must be inbetween each value X / Y");
            }
            return;
        }


        //private bool cd_checker(string adr)   //
        //{
        //    if(DirectoryInfo.M)
        //    return false;
        //}

        private string[] GetDir(string adr)  //dir command function
        {
            var dir = Directory.GetDirectories(adr);
            return dir;
        }

        private bool check_color(string color)           //colour command function
        {
            switch (color)                  //Switch statement to find the colour chosen. returns false if there is an error
            {
                case "black":
                    {
                        Console.ForegroundColor = ConsoleColor.Black;
                        return true;
                    }
                case "darkblue":
                    {
                        Console.ForegroundColor = ConsoleColor.DarkBlue;
                        return true;
                    }
                case "darkgreen":
                    {
                        Console.ForegroundColor = ConsoleColor.DarkGreen;
                        return true;
                    }
                case "darkcyan":
                    {
                        Console.ForegroundColor = ConsoleColor.DarkCyan;
                        return true;
                    }
                case "darkred":
                    {
                        Console.ForegroundColor = ConsoleColor.DarkRed;
                        return true;
                    }
                case "darkmagenta":
                    {
                        Console.ForegroundColor = ConsoleColor.DarkMagenta;
                        return true;
                    }
                case "darkyellow":
                    {
                        Console.ForegroundColor = ConsoleColor.DarkYellow;
                        return true;
                    }
                case "gray":
                    {
                        Console.ForegroundColor = ConsoleColor.Gray;
                        return true;
                    }
                case "darkgray":
                    {
                        Console.ForegroundColor = ConsoleColor.DarkGray; 
                        return true;
                    }
                case "blue":
                    {
                        Console.ForegroundColor = ConsoleColor.Blue;
                        return true;
                    }
                case "green":
                    {
                        Console.ForegroundColor = ConsoleColor.Green;
                        return true;
                    }
                case "cyan":
                    {
                        Console.ForegroundColor = ConsoleColor.Cyan;
                        return true;
                    }
                case "red":
                    {
                        Console.ForegroundColor = ConsoleColor.Red;
                        return true;
                    }
                case "magenta":
                    {
                        Console.ForegroundColor = ConsoleColor.Magenta;
                        return true;
                    }
                case "yellow":
                    {
                        Console.ForegroundColor = ConsoleColor.Yellow;
                        return true;
                    }
                case "white":
                    {
                        Console.ForegroundColor = ConsoleColor.White;
                        return true;
                    }
                default:
                    {
                        return false;
                    }
            }
        }
    }
}
